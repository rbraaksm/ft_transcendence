import { __decorate, __metadata } from "tslib";
import { Directive, HostBinding, HostListener, Input, Output, EventEmitter, } from '@angular/core';
import { Router } from './router.service';
var DEFAULT_TARGET = '_self';
/**
 * The LinkTo directive links to routes in your app
 *
 * Links are pushed to the `Router` service to trigger a route change.
 * Query params can be represented as an object or a string of names/values
 *
 * <a linkTo="/home/page" [queryParams]="{ id: 123 }">Home Page</a>
 * <a [linkTo]="'/pages' + page.id">Page 1</a>
 */
var LinkTo = /** @class */ (function () {
    function LinkTo(router) {
        this.router = router;
        this.target = DEFAULT_TARGET;
        this.hrefUpdated = new EventEmitter();
    }
    Object.defineProperty(LinkTo.prototype, "linkTo", {
        set: function (href) {
            this._href = href;
            this._updateHref();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LinkTo.prototype, "queryParams", {
        set: function (params) {
            this._query = params;
            this._updateHref();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LinkTo.prototype, "fragment", {
        set: function (hash) {
            this._hash = hash;
            this._updateHref();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Handles click events on the associated link
     * Prevents default action for non-combination click events without a target
     */
    LinkTo.prototype.onClick = function (event) {
        if (!this._comboClick(event) && this.target === DEFAULT_TARGET) {
            this.router.go(this._href, this._query, this._hash);
            event.preventDefault();
        }
    };
    LinkTo.prototype._updateHref = function () {
        var href = this._cleanUpHref(this._href);
        this.linkHref = this.router.serializeUrl(href, this._query, this._hash);
        this.hrefUpdated.emit(this.linkHref);
    };
    /**
     * Determines whether the click event happened with a combination of other keys
     */
    LinkTo.prototype._comboClick = function (event) {
        var buttonEvent = event.which || event.button;
        return buttonEvent > 1 || event.ctrlKey || event.metaKey || event.shiftKey;
    };
    LinkTo.prototype._cleanUpHref = function (href) {
        if (href === void 0) { href = ''; }
        // Trim whitespaces and remove trailing slashes
        return href.trim().replace(/[\/]+$/, '');
    };
    LinkTo.ctorParameters = function () { return [
        { type: Router }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], LinkTo.prototype, "target", void 0);
    __decorate([
        HostBinding('href'),
        __metadata("design:type", String)
    ], LinkTo.prototype, "linkHref", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], LinkTo.prototype, "linkTo", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], LinkTo.prototype, "queryParams", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], LinkTo.prototype, "fragment", null);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], LinkTo.prototype, "hrefUpdated", void 0);
    __decorate([
        HostListener('click', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], LinkTo.prototype, "onClick", null);
    LinkTo = __decorate([
        Directive({ selector: 'a[linkTo]' }),
        __metadata("design:paramtypes", [Router])
    ], LinkTo);
    return LinkTo;
}());
export { LinkTo };
//# sourceMappingURL=link-to.directive.js.map