import { __decorate, __metadata, __param, __read, __spread } from "tslib";
import { AfterContentInit, ContentChildren, Directive, ElementRef, Inject, Input, OnChanges, OnDestroy, Optional, QueryList, Renderer2, } from '@angular/core';
import { LinkTo } from './link-to.directive';
import { Router } from './router.service';
import { combineLatest, of, Subject } from 'rxjs';
import { map, mapTo, startWith, takeUntil } from 'rxjs/operators';
export var LINK_ACTIVE_OPTIONS = {
    exact: true,
};
/**
 * The LinkActive directive toggles classes on elements that contain an active linkTo directive
 *
 * <a linkActive="active" linkTo="/home/page">Home Page</a>
 * <ol>
 *  <li linkActive="active" *ngFor="var link of links">
 *    <a [linkTo]="'/link/' + link.id">{{ link.title }}</a>
 *  </li>
 * </ol>
 */
var LinkActive = /** @class */ (function () {
    function LinkActive(element, router, renderer, defaultActiveOptions, link) {
        this.element = element;
        this.router = router;
        this.renderer = renderer;
        this.defaultActiveOptions = defaultActiveOptions;
        this.link = link;
        this.activeClass = 'active';
        this._activeOptions = { exact: true };
        this._destroy$ = new Subject();
    }
    LinkActive.prototype.ngAfterContentInit = function () {
        var _this = this;
        if (this.defaultActiveOptions && !this.activeOptions) {
            this._activeOptions = this.defaultActiveOptions;
        }
        else if (this.activeOptions) {
            this._activeOptions = this.activeOptions;
        }
        this.links.changes.subscribe(function () { return _this.collectLinks(); });
        this.collectLinks();
    };
    LinkActive.prototype.ngOnChanges = function () {
        this.collectLinks();
    };
    LinkActive.prototype.collectLinks = function () {
        var _this = this;
        if (this._linksSub) {
            this._linksSub.unsubscribe();
        }
        var contentLinks$ = this.links
            ? this.links
                .toArray()
                .map(function (link) {
                return link.hrefUpdated.pipe(startWith(link.linkHref), mapTo(link.linkHref));
            })
            : [];
        var link$ = this.link
            ? this.link.hrefUpdated.pipe(startWith(this.link.linkHref), mapTo(this.link.linkHref))
            : of('');
        var router$ = this.router.url$.pipe(map(function (path) { return _this.router.getExternalUrl(path || '/'); }));
        var observables$ = __spread([router$, link$], contentLinks$);
        this._linksSub = combineLatest(observables$)
            .pipe(takeUntil(this._destroy$))
            .subscribe(function (_a) {
            var _b = __read(_a), path = _b[0], link = _b[1], links = _b.slice(2);
            _this.checkActive(__spread(links, [link]), path);
        });
    };
    LinkActive.prototype.checkActive = function (linkHrefs, path) {
        var _this = this;
        var active = linkHrefs.reduce(function (isActive, current) {
            var _a = __read(current.split('?'), 1), href = _a[0];
            if (_this._activeOptions.exact) {
                isActive = isActive ? isActive : href === path;
            }
            else {
                isActive = isActive ? isActive : path.startsWith(href);
            }
            return isActive;
        }, false);
        this.updateClasses(active);
    };
    LinkActive.prototype.updateClasses = function (active) {
        var _this = this;
        var activeClasses = this.activeClass.split(' ');
        activeClasses.forEach(function (activeClass) {
            if (active) {
                _this.renderer.addClass(_this.element.nativeElement, activeClass);
            }
            else {
                _this.renderer.removeClass(_this.element.nativeElement, activeClass);
            }
        });
    };
    LinkActive.prototype.ngOnDestroy = function () {
        this._destroy$.next();
    };
    LinkActive.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Router },
        { type: Renderer2 },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LINK_ACTIVE_OPTIONS,] }] },
        { type: LinkTo, decorators: [{ type: Optional }] }
    ]; };
    __decorate([
        ContentChildren(LinkTo, { descendants: true }),
        __metadata("design:type", QueryList)
    ], LinkActive.prototype, "links", void 0);
    __decorate([
        Input('linkActive'),
        __metadata("design:type", Object)
    ], LinkActive.prototype, "activeClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], LinkActive.prototype, "activeOptions", void 0);
    LinkActive = __decorate([
        Directive({ selector: '[linkActive]' }),
        __param(3, Optional()),
        __param(3, Inject(LINK_ACTIVE_OPTIONS)),
        __param(4, Optional()),
        __metadata("design:paramtypes", [ElementRef,
            Router,
            Renderer2, Object, LinkTo])
    ], LinkActive);
    return LinkActive;
}());
export { LinkActive };
//# sourceMappingURL=link-active.directive.js.map