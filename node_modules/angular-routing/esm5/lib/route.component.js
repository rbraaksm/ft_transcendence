import { __assign, __decorate, __metadata, __read } from "tslib";
import { Component, OnInit, Input, Type, ViewContainerRef, ComponentFactoryResolver, ContentChild, TemplateRef, ChangeDetectionStrategy, Self, NgModuleFactory, Compiler, OnDestroy, } from '@angular/core';
import { Subject, BehaviorSubject, of, from } from 'rxjs';
import { distinctUntilChanged, filter, takeUntil, mergeMap, withLatestFrom, map, } from 'rxjs/operators';
import { RouteParams, RoutePath } from './route-params.service';
import { RouterComponent } from './router.component';
import { Router } from './router.service';
export function getRouteParams(routeComponent) {
    return routeComponent.routeParams$;
}
export function getRoutePath(routeComponent) {
    return routeComponent.routePath$;
}
var RouteComponent = /** @class */ (function () {
    function RouteComponent(router, routerComponent, resolver, viewContainerRef, compiler) {
        this.router = router;
        this.routerComponent = routerComponent;
        this.resolver = resolver;
        this.viewContainerRef = viewContainerRef;
        this.compiler = compiler;
        this.reuse = true;
        this.destroy$ = new Subject();
        this.state$ = new BehaviorSubject({
            params: {},
            path: '',
            shouldRender: false,
        });
        this.shouldRender$ = this.state$.pipe(map(function (state) { return state.shouldRender; }));
        this.routeParams$ = this.state$.pipe(map(function (state) { return state.params; }), distinctUntilChanged(), takeUntil(this.destroy$));
        this.routePath$ = this.state$.pipe(map(function (state) { return state.path; }), distinctUntilChanged(), takeUntil(this.destroy$));
    }
    RouteComponent_1 = RouteComponent;
    Object.defineProperty(RouteComponent.prototype, "path", {
        get: function () {
            return this._path;
        },
        set: function (value) {
            this._path = this.sanitizePath(value);
        },
        enumerable: true,
        configurable: true
    });
    RouteComponent.prototype.ngOnInit = function () {
        var _this = this;
        // account for root level routes, don't add the basePath
        var path = this.routerComponent.parentRouterComponent
            ? this.routerComponent.parentRouterComponent.basePath + this.path
            : this.path;
        this.route = this.registerRoute(path, this.exact, this.load);
        this.routerComponent.activeRoute$
            .pipe(filter(function (ar) { return ar !== null; }), distinctUntilChanged(), withLatestFrom(this.shouldRender$), mergeMap(function (_a) {
            var _b = __read(_a, 2), current = _b[0], rendered = _b[1];
            if (current.route === _this.route) {
                if (_this.redirectTo) {
                    _this.router.go(_this.redirectTo);
                    return of(null);
                }
                _this.updateState({
                    params: current.params,
                    path: current.path,
                });
                if (!rendered) {
                    if (!_this.reuse) {
                        _this.clearView();
                    }
                    return _this.loadAndRender(current.route);
                }
                return of(null);
            }
            else if (rendered) {
                return of(_this.clearView());
            }
            return of(null);
        }), takeUntil(this.destroy$))
            .subscribe();
    };
    RouteComponent.prototype.ngOnDestroy = function () {
        this.routerComponent.unregisterRoute(this.route);
        this.destroy$.next();
    };
    RouteComponent.prototype.registerRoute = function (path, exact, load) {
        return this.routerComponent.registerRoute({
            path: path,
            load: load,
            options: this.routeOptions || { exact: exact },
        });
    };
    RouteComponent.prototype.loadAndRender = function (route) {
        var _this = this;
        if (route.load) {
            return from(route.load().then(function (componentOrModule) {
                if (componentOrModule instanceof NgModuleFactory) {
                    var moduleRef = componentOrModule.create(_this.viewContainerRef.injector);
                    var component = moduleRef.instance.routeComponent;
                    _this.renderComponent(component);
                }
                else if (componentOrModule.Éµmod) {
                    return _this.compiler
                        .compileModuleAsync(componentOrModule)
                        .then(function (moduleFactory) {
                        var moduleRef = moduleFactory.create(_this.viewContainerRef.injector);
                        var component = moduleRef.instance.routeComponent;
                        _this.renderComponent(component);
                        return true;
                    });
                }
                else {
                    _this.renderComponent(componentOrModule);
                }
                return true;
            }));
        }
        else {
            this.showTemplate();
            return of(true);
        }
    };
    RouteComponent.prototype.renderComponent = function (component) {
        var componentFactory = this.resolver.resolveComponentFactory(component);
        this.showTemplate();
        this.viewContainerRef.createComponent(componentFactory, this.viewContainerRef.length, this.viewContainerRef.injector);
    };
    RouteComponent.prototype.clearComponent = function () {
        this.viewContainerRef.clear();
        this.hideTemplate();
    };
    RouteComponent.prototype.showTemplate = function () {
        var _this = this;
        setTimeout(function () {
            _this.updateState({ shouldRender: true });
        });
    };
    RouteComponent.prototype.hideTemplate = function () {
        this.updateState({ shouldRender: false });
    };
    RouteComponent.prototype.clearView = function () {
        if (this.load) {
            this.clearComponent();
        }
        else {
            this.hideTemplate();
        }
    };
    RouteComponent.prototype.sanitizePath = function (path) {
        var trimmed = path.trim();
        return trimmed.startsWith('/') ? trimmed : "/" + trimmed;
    };
    RouteComponent.prototype.updateState = function (newState) {
        this.state$.next(__assign(__assign({}, this.state$.value), newState));
    };
    var RouteComponent_1;
    RouteComponent.ctorParameters = function () { return [
        { type: Router },
        { type: RouterComponent },
        { type: ComponentFactoryResolver },
        { type: ViewContainerRef },
        { type: Compiler }
    ]; };
    __decorate([
        ContentChild(TemplateRef),
        __metadata("design:type", TemplateRef)
    ], RouteComponent.prototype, "template", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], RouteComponent.prototype, "path", null);
    __decorate([
        Input(),
        __metadata("design:type", Type)
    ], RouteComponent.prototype, "component", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Function)
    ], RouteComponent.prototype, "load", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], RouteComponent.prototype, "reuse", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], RouteComponent.prototype, "redirectTo", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], RouteComponent.prototype, "exact", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], RouteComponent.prototype, "routeOptions", void 0);
    RouteComponent = RouteComponent_1 = __decorate([
        Component({
            // tslint:disable-next-line:component-selector
            selector: 'route',
            template: "\n    <ng-container\n      *ngIf=\"(shouldRender$ | async) && template\"\n      [ngTemplateOutlet]=\"template\"\n    >\n    </ng-container>\n  ",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [
                {
                    provide: RouteParams,
                    useFactory: getRouteParams,
                    deps: [[new Self(), RouteComponent_1]],
                },
                {
                    provide: RoutePath,
                    useFactory: getRoutePath,
                    deps: [[new Self(), RouteComponent_1]],
                },
            ]
        }),
        __metadata("design:paramtypes", [Router,
            RouterComponent,
            ComponentFactoryResolver,
            ViewContainerRef,
            Compiler])
    ], RouteComponent);
    return RouteComponent;
}());
export { RouteComponent };
//# sourceMappingURL=route.component.js.map