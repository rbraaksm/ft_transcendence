import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { PlatformLocation, Location } from '@angular/common';
import { BehaviorSubject } from 'rxjs';
import { distinctUntilChanged, map } from 'rxjs/operators';
import * as queryString from 'query-string';
import { UrlParser } from './url-parser';
import { compareParams } from './route-params.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "./url-parser";
var Router = /** @class */ (function () {
    function Router(location, platformLocation, urlParser) {
        var _this = this;
        this.location = location;
        this.platformLocation = platformLocation;
        this.urlParser = urlParser;
        this.state$ = new BehaviorSubject({
            url: this.location.path(),
            queryParams: {},
            hash: '',
        });
        this.url$ = this.state$.pipe(map(function (state) { return state.url; }), distinctUntilChanged());
        this.hash$ = this.state$.pipe(map(function (state) { return state.hash; }), distinctUntilChanged());
        this.queryParams$ = this.state$.pipe(map(function (state) { return state.queryParams; }), distinctUntilChanged(compareParams));
        this.location.subscribe(function () {
            _this.nextState(_this.getLocation());
        });
        this.nextState(this.getLocation());
    }
    Router.prototype.go = function (url, queryParams, hash) {
        this.location.go(this.serializeUrl(url, queryParams, hash));
        this.nextState(this.getLocation());
    };
    Router.prototype.replace = function (url, queryParams, hash) {
        this.location.replaceState(this.serializeUrl(url, queryParams, hash));
        this.nextState(this.getLocation());
    };
    Router.prototype.serializeUrl = function (url, queryParams, hash) {
        // if relative path
        if (!url.startsWith('/')) {
            url = this.urlParser.joinUrls(this.location.path(), url);
        }
        return (url +
            (queryParams ? "?" + queryString.stringify(queryParams) : '') +
            ("" + (hash ? '#' + hash : '')));
    };
    Router.prototype.getExternalUrl = function (url) {
        return this.location.prepareExternalUrl(url);
    };
    Router.prototype.parseSearchParams = function (searchParams) {
        var queryParams = {};
        searchParams.forEach(function (value, key) {
            queryParams[key] = value;
        });
        return queryParams;
    };
    Router.prototype.normalizePath = function (path) {
        return this.location.normalize(path);
    };
    Router.prototype.getLocation = function () {
        return this.platformLocation.href;
    };
    Router.prototype.nextState = function (url) {
        var parsedUrl = this._parseUrl(url);
        this.state$.next({
            url: parsedUrl.pathname,
            queryParams: this.parseSearchParams(parsedUrl.searchParams),
            hash: parsedUrl.hash ? parsedUrl.hash.split('#')[0] : '',
        });
    };
    Router.prototype._parseUrl = function (path) {
        return this.urlParser.parse(path);
    };
    Router.ctorParameters = function () { return [
        { type: Location },
        { type: PlatformLocation },
        { type: UrlParser }
    ]; };
    Router.ɵprov = i0.ɵɵdefineInjectable({ factory: function Router_Factory() { return new Router(i0.ɵɵinject(i1.Location), i0.ɵɵinject(i1.PlatformLocation), i0.ɵɵinject(i2.UrlParser)); }, token: Router, providedIn: "root" });
    Router = __decorate([
        Injectable({
            providedIn: 'root',
        }),
        __metadata("design:paramtypes", [Location,
            PlatformLocation,
            UrlParser])
    ], Router);
    return Router;
}());
export { Router };
//# sourceMappingURL=router.service.js.map