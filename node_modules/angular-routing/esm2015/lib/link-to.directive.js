import { __decorate, __metadata } from "tslib";
import { Directive, HostBinding, HostListener, Input, Output, EventEmitter, } from '@angular/core';
import { Router } from './router.service';
const DEFAULT_TARGET = '_self';
/**
 * The LinkTo directive links to routes in your app
 *
 * Links are pushed to the `Router` service to trigger a route change.
 * Query params can be represented as an object or a string of names/values
 *
 * <a linkTo="/home/page" [queryParams]="{ id: 123 }">Home Page</a>
 * <a [linkTo]="'/pages' + page.id">Page 1</a>
 */
let LinkTo = class LinkTo {
    constructor(router) {
        this.router = router;
        this.target = DEFAULT_TARGET;
        this.hrefUpdated = new EventEmitter();
    }
    set linkTo(href) {
        this._href = href;
        this._updateHref();
    }
    set queryParams(params) {
        this._query = params;
        this._updateHref();
    }
    set fragment(hash) {
        this._hash = hash;
        this._updateHref();
    }
    /**
     * Handles click events on the associated link
     * Prevents default action for non-combination click events without a target
     */
    onClick(event) {
        if (!this._comboClick(event) && this.target === DEFAULT_TARGET) {
            this.router.go(this._href, this._query, this._hash);
            event.preventDefault();
        }
    }
    _updateHref() {
        const href = this._cleanUpHref(this._href);
        this.linkHref = this.router.serializeUrl(href, this._query, this._hash);
        this.hrefUpdated.emit(this.linkHref);
    }
    /**
     * Determines whether the click event happened with a combination of other keys
     */
    _comboClick(event) {
        const buttonEvent = event.which || event.button;
        return buttonEvent > 1 || event.ctrlKey || event.metaKey || event.shiftKey;
    }
    _cleanUpHref(href = '') {
        // Trim whitespaces and remove trailing slashes
        return href.trim().replace(/[\/]+$/, '');
    }
};
LinkTo.ctorParameters = () => [
    { type: Router }
];
__decorate([
    Input(),
    __metadata("design:type", Object)
], LinkTo.prototype, "target", void 0);
__decorate([
    HostBinding('href'),
    __metadata("design:type", String)
], LinkTo.prototype, "linkHref", void 0);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], LinkTo.prototype, "linkTo", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], LinkTo.prototype, "queryParams", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], LinkTo.prototype, "fragment", null);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], LinkTo.prototype, "hrefUpdated", void 0);
__decorate([
    HostListener('click', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], LinkTo.prototype, "onClick", null);
LinkTo = __decorate([
    Directive({ selector: 'a[linkTo]' }),
    __metadata("design:paramtypes", [Router])
], LinkTo);
export { LinkTo };
//# sourceMappingURL=link-to.directive.js.map