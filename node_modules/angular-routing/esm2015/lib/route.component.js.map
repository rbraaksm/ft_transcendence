{"version":3,"file":"route.component.js","sourceRoot":"ng://angular-routing/","sources":["lib/route.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  OnInit,\n  Input,\n  Type,\n  ViewContainerRef,\n  ComponentFactoryResolver,\n  ContentChild,\n  TemplateRef,\n  ChangeDetectionStrategy,\n  Self,\n  NgModuleFactory,\n  Compiler,\n  OnDestroy,\n} from '@angular/core';\n\nimport { Subject, BehaviorSubject, of, from } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  takeUntil,\n  mergeMap,\n  withLatestFrom,\n  map,\n} from 'rxjs/operators';\n\nimport { Load, Route, RouteOptions } from './route';\nimport { Params, RouteParams, RoutePath } from './route-params.service';\nimport { RouterComponent } from './router.component';\nimport { Router } from './router.service';\n\nexport function getRouteParams(routeComponent: RouteComponent) {\n  return routeComponent.routeParams$;\n}\n\nexport function getRoutePath(routeComponent: RouteComponent) {\n  return routeComponent.routePath$;\n}\n\ninterface State {\n  params: Params;\n  path: string;\n  shouldRender: boolean;\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'route',\n  template: `\n    <ng-container\n      *ngIf=\"(shouldRender$ | async) && template\"\n      [ngTemplateOutlet]=\"template\"\n    >\n    </ng-container>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    {\n      provide: RouteParams,\n      useFactory: getRouteParams,\n      deps: [[new Self(), RouteComponent]],\n    },\n    {\n      provide: RoutePath,\n      useFactory: getRoutePath,\n      deps: [[new Self(), RouteComponent]],\n    },\n  ],\n})\nexport class RouteComponent implements OnInit, OnDestroy {\n  @ContentChild(TemplateRef) template: TemplateRef<any> | null;\n\n  @Input()\n  get path() {\n    return this._path;\n  }\n\n  set path(value: string) {\n    this._path = this.sanitizePath(value);\n  }\n\n  @Input() component: Type<any>;\n  @Input() load: Load;\n  @Input() reuse = true;\n  @Input() redirectTo!: string;\n  @Input() exact: boolean;\n  @Input() routeOptions: RouteOptions;\n\n  private _path: string;\n  private destroy$ = new Subject();\n  private readonly state$ = new BehaviorSubject<State>({\n    params: {},\n    path: '',\n    shouldRender: false,\n  });\n\n  readonly shouldRender$ = this.state$.pipe(map((state) => state.shouldRender));\n  readonly routeParams$ = this.state$.pipe(\n    map((state) => state.params),\n    distinctUntilChanged(),\n    takeUntil(this.destroy$)\n  );\n  readonly routePath$ = this.state$.pipe(\n    map((state) => state.path),\n    distinctUntilChanged(),\n    takeUntil(this.destroy$)\n  );\n  route!: Route;\n\n  constructor(\n    private router: Router,\n    private routerComponent: RouterComponent,\n    private resolver: ComponentFactoryResolver,\n    private viewContainerRef: ViewContainerRef,\n    private compiler: Compiler\n  ) {}\n\n  ngOnInit(): void {\n    // account for root level routes, don't add the basePath\n    const path = this.routerComponent.parentRouterComponent\n      ? this.routerComponent.parentRouterComponent.basePath + this.path\n      : this.path;\n\n    this.route = this.registerRoute(path, this.exact, this.load);\n\n    this.routerComponent.activeRoute$\n      .pipe(\n        filter((ar) => ar !== null),\n        distinctUntilChanged(),\n        withLatestFrom(this.shouldRender$),\n        mergeMap(([current, rendered]) => {\n          if (current.route === this.route) {\n            if (this.redirectTo) {\n              this.router.go(this.redirectTo);\n              return of(null);\n            }\n\n            this.updateState({\n              params: current.params,\n              path: current.path,\n            });\n\n            if (!rendered) {\n              if (!this.reuse) {\n                this.clearView();\n              }\n\n              return this.loadAndRender(current.route);\n            }\n\n            return of(null);\n          } else if (rendered) {\n            return of(this.clearView());\n          }\n\n          return of(null);\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe();\n  }\n\n  ngOnDestroy() {\n    this.routerComponent.unregisterRoute(this.route);\n    this.destroy$.next();\n  }\n\n  registerRoute(path: string, exact: boolean, load: Load) {\n    return this.routerComponent.registerRoute({\n      path: path,\n      load: load,\n      options: this.routeOptions || { exact: exact },\n    });\n  }\n\n  private loadAndRender(route: Route) {\n    if (route.load) {\n      return from(\n        route.load().then((componentOrModule) => {\n          if (componentOrModule instanceof NgModuleFactory) {\n            const moduleRef = componentOrModule.create(\n              this.viewContainerRef.injector\n            );\n            const component = moduleRef.instance.routeComponent;\n\n            this.renderComponent(component);\n          } else if (componentOrModule.ɵmod) {\n            return this.compiler\n              .compileModuleAsync(componentOrModule as Type<any>)\n              .then((moduleFactory) => {\n                const moduleRef = moduleFactory.create(\n                  this.viewContainerRef.injector\n                );\n                const component = moduleRef.instance.routeComponent;\n                this.renderComponent(component);\n\n                return true;\n              });\n          } else {\n            this.renderComponent(componentOrModule);\n          }\n\n          return true;\n        })\n      );\n    } else {\n      this.showTemplate();\n      return of(true);\n    }\n  }\n\n  private renderComponent(component: Type<any>) {\n    const componentFactory = this.resolver.resolveComponentFactory(component);\n\n    this.showTemplate();\n    this.viewContainerRef.createComponent(\n      componentFactory,\n      this.viewContainerRef.length,\n      this.viewContainerRef.injector\n    );\n  }\n\n  private clearComponent() {\n    this.viewContainerRef.clear();\n    this.hideTemplate();\n  }\n\n  private showTemplate() {\n    setTimeout(() => {\n      this.updateState({ shouldRender: true });\n    });\n  }\n\n  private hideTemplate() {\n    this.updateState({ shouldRender: false });\n  }\n\n  private clearView() {\n    if (this.load) {\n      this.clearComponent();\n    } else {\n      this.hideTemplate();\n    }\n  }\n\n  private sanitizePath(path: string): string {\n    const trimmed = path.trim();\n    return trimmed.startsWith('/') ? trimmed : `/${trimmed}`;\n  }\n\n  private updateState(newState: Partial<State>) {\n    this.state$.next({ ...this.state$.value, ...newState });\n  }\n}\n"]}