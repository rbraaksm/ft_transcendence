import { __decorate, __metadata, __param } from "tslib";
import { AfterContentInit, ContentChildren, Directive, ElementRef, Inject, Input, OnChanges, OnDestroy, Optional, QueryList, Renderer2, } from '@angular/core';
import { LinkTo } from './link-to.directive';
import { Router } from './router.service';
import { combineLatest, of, Subject } from 'rxjs';
import { map, mapTo, startWith, takeUntil } from 'rxjs/operators';
export const LINK_ACTIVE_OPTIONS = {
    exact: true,
};
/**
 * The LinkActive directive toggles classes on elements that contain an active linkTo directive
 *
 * <a linkActive="active" linkTo="/home/page">Home Page</a>
 * <ol>
 *  <li linkActive="active" *ngFor="var link of links">
 *    <a [linkTo]="'/link/' + link.id">{{ link.title }}</a>
 *  </li>
 * </ol>
 */
let LinkActive = class LinkActive {
    constructor(element, router, renderer, defaultActiveOptions, link) {
        this.element = element;
        this.router = router;
        this.renderer = renderer;
        this.defaultActiveOptions = defaultActiveOptions;
        this.link = link;
        this.activeClass = 'active';
        this._activeOptions = { exact: true };
        this._destroy$ = new Subject();
    }
    ngAfterContentInit() {
        if (this.defaultActiveOptions && !this.activeOptions) {
            this._activeOptions = this.defaultActiveOptions;
        }
        else if (this.activeOptions) {
            this._activeOptions = this.activeOptions;
        }
        this.links.changes.subscribe(() => this.collectLinks());
        this.collectLinks();
    }
    ngOnChanges() {
        this.collectLinks();
    }
    collectLinks() {
        if (this._linksSub) {
            this._linksSub.unsubscribe();
        }
        const contentLinks$ = this.links
            ? this.links
                .toArray()
                .map((link) => link.hrefUpdated.pipe(startWith(link.linkHref), mapTo(link.linkHref)))
            : [];
        const link$ = this.link
            ? this.link.hrefUpdated.pipe(startWith(this.link.linkHref), mapTo(this.link.linkHref))
            : of('');
        const router$ = this.router.url$.pipe(map((path) => this.router.getExternalUrl(path || '/')));
        const observables$ = [router$, link$, ...contentLinks$];
        this._linksSub = combineLatest(observables$)
            .pipe(takeUntil(this._destroy$))
            .subscribe(([path, link, ...links]) => {
            this.checkActive([...links, link], path);
        });
    }
    checkActive(linkHrefs, path) {
        const active = linkHrefs.reduce((isActive, current) => {
            const [href] = current.split('?');
            if (this._activeOptions.exact) {
                isActive = isActive ? isActive : href === path;
            }
            else {
                isActive = isActive ? isActive : path.startsWith(href);
            }
            return isActive;
        }, false);
        this.updateClasses(active);
    }
    updateClasses(active) {
        const activeClasses = this.activeClass.split(' ');
        activeClasses.forEach((activeClass) => {
            if (active) {
                this.renderer.addClass(this.element.nativeElement, activeClass);
            }
            else {
                this.renderer.removeClass(this.element.nativeElement, activeClass);
            }
        });
    }
    ngOnDestroy() {
        this._destroy$.next();
    }
};
LinkActive.ctorParameters = () => [
    { type: ElementRef },
    { type: Router },
    { type: Renderer2 },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LINK_ACTIVE_OPTIONS,] }] },
    { type: LinkTo, decorators: [{ type: Optional }] }
];
__decorate([
    ContentChildren(LinkTo, { descendants: true }),
    __metadata("design:type", QueryList)
], LinkActive.prototype, "links", void 0);
__decorate([
    Input('linkActive'),
    __metadata("design:type", Object)
], LinkActive.prototype, "activeClass", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], LinkActive.prototype, "activeOptions", void 0);
LinkActive = __decorate([
    Directive({ selector: '[linkActive]' }),
    __param(3, Optional()),
    __param(3, Inject(LINK_ACTIVE_OPTIONS)),
    __param(4, Optional()),
    __metadata("design:paramtypes", [ElementRef,
        Router,
        Renderer2, Object, LinkTo])
], LinkActive);
export { LinkActive };
//# sourceMappingURL=link-active.directive.js.map