{"version":3,"file":"link-to.directive.js","sourceRoot":"ng://angular-routing/","sources":["lib/link-to.directive.ts"],"names":[],"mappings":";AAAA,OAAO,EACL,SAAS,EACT,WAAW,EACX,YAAY,EACZ,KAAK,EACL,MAAM,EACN,YAAY,GACb,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAG1C,MAAM,cAAc,GAAG,OAAO,CAAC;AAE/B;;;;;;;;GAQG;AAEH,IAAa,MAAM,GAAnB,MAAa,MAAM;IAyBjB,YAAoB,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;QAxBzB,WAAM,GAAG,cAAc,CAAC;QAkBvB,gBAAW,GAAyB,IAAI,YAAY,EAAU,CAAC;IAMpC,CAAC;IArB7B,IAAI,MAAM,CAAC,IAAY;QAC9B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAEQ,IAAI,WAAW,CAAC,MAAc;QACrC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAEQ,IAAI,QAAQ,CAAC,IAAY;QAChC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAUD;;;OAGG;IAEH,OAAO,CAAC,KAAU;QAChB,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,MAAM,KAAK,cAAc,EAAE;YAC9D,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YAEpD,KAAK,CAAC,cAAc,EAAE,CAAC;SACxB;IACH,CAAC;IAEO,WAAW;QACjB,MAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAE3C,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAExE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACvC,CAAC;IAED;;OAEG;IACK,WAAW,CAAC,KAAK;QACvB,MAAM,WAAW,GAAG,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,CAAC;QAEhD,OAAO,WAAW,GAAG,CAAC,IAAI,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,QAAQ,CAAC;IAC7E,CAAC;IAEO,YAAY,CAAC,OAAe,EAAE;QACpC,+CAA+C;QAC/C,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;IAC3C,CAAC;CACF,CAAA;;YApC6B,MAAM;;AAxBzB;IAAR,KAAK,EAAE;;sCAAyB;AACZ;IAApB,WAAW,CAAC,MAAM,CAAC;;wCAAkB;AAE7B;IAAR,KAAK,EAAE;;;oCAGP;AAEQ;IAAR,KAAK,EAAE;;;yCAGP;AAEQ;IAAR,KAAK,EAAE;;;sCAGP;AAES;IAAT,MAAM,EAAE;8BAAc,YAAY;2CAAsC;AAazE;IADC,YAAY,CAAC,OAAO,EAAE,CAAC,QAAQ,CAAC,CAAC;;;;qCAOjC;AAtCU,MAAM;IADlB,SAAS,CAAC,EAAE,QAAQ,EAAE,WAAW,EAAE,CAAC;qCA0BP,MAAM;GAzBvB,MAAM,CA6DlB;SA7DY,MAAM","sourcesContent":["import {\n  Directive,\n  HostBinding,\n  HostListener,\n  Input,\n  Output,\n  EventEmitter,\n} from '@angular/core';\nimport { Router } from './router.service';\nimport { Params } from './route-params.service';\n\nconst DEFAULT_TARGET = '_self';\n\n/**\n * The LinkTo directive links to routes in your app\n *\n * Links are pushed to the `Router` service to trigger a route change.\n * Query params can be represented as an object or a string of names/values\n *\n * <a linkTo=\"/home/page\" [queryParams]=\"{ id: 123 }\">Home Page</a>\n * <a [linkTo]=\"'/pages' + page.id\">Page 1</a>\n */\n@Directive({ selector: 'a[linkTo]' })\nexport class LinkTo {\n  @Input() target = DEFAULT_TARGET;\n  @HostBinding('href') linkHref: string;\n\n  @Input() set linkTo(href: string) {\n    this._href = href;\n    this._updateHref();\n  }\n\n  @Input() set queryParams(params: Params) {\n    this._query = params;\n    this._updateHref();\n  }\n\n  @Input() set fragment(hash: string) {\n    this._hash = hash;\n    this._updateHref();\n  }\n\n  @Output() hrefUpdated: EventEmitter<string> = new EventEmitter<string>();\n\n  private _href: string;\n  private _query: Params;\n  private _hash: string;\n\n  constructor(private router: Router) {}\n\n  /**\n   * Handles click events on the associated link\n   * Prevents default action for non-combination click events without a target\n   */\n  @HostListener('click', ['$event'])\n  onClick(event: any) {\n    if (!this._comboClick(event) && this.target === DEFAULT_TARGET) {\n      this.router.go(this._href, this._query, this._hash);\n\n      event.preventDefault();\n    }\n  }\n\n  private _updateHref() {\n    const href = this._cleanUpHref(this._href);\n\n    this.linkHref = this.router.serializeUrl(href, this._query, this._hash);\n\n    this.hrefUpdated.emit(this.linkHref);\n  }\n\n  /**\n   * Determines whether the click event happened with a combination of other keys\n   */\n  private _comboClick(event) {\n    const buttonEvent = event.which || event.button;\n\n    return buttonEvent > 1 || event.ctrlKey || event.metaKey || event.shiftKey;\n  }\n\n  private _cleanUpHref(href: string = ''): string {\n    // Trim whitespaces and remove trailing slashes\n    return href.trim().replace(/[\\/]+$/, '');\n  }\n}\n"]}